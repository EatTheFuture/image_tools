name: dev_build

on:
  workflow_dispatch

env:
  CARGO_TERM_COLOR: always
  executable_names: hdri_merge camera_analyzer

jobs:
  dev-build:
    name: Development Build
    runs-on: ${{ matrix.os }}   
    strategy:
      matrix:
        build: [x86_64-linux, x86_64-macos, x86_64-windows]
        include:
        - build: x86_64-linux
          os: ubuntu-20.04
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
        - build: x86_64-macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          cross: false
        - build: x86_64-windows
          os: windows-2019
          rust: stable
          target: x86_64-pc-windows-msvc
          cross: false

    steps:
      - name: Install Ubuntu dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get install libgtk-3-dev libxcb-shape0-dev libxcb-xfixes0-dev wget

      - name: Checkout sources
        uses: actions/checkout@v2
      
      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Build release binaries
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" =~ "ubuntu" ]]; then
            # Build appimages on Ubuntu.
            wget https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
            mv appimagetool-x86_64.AppImage appimagetool
            chmod +x appimagetool
            sudo mv appimagetool /usr/local/bin/
            cargo +${{ matrix.rust }} install cargo-appimage --version 1.3.1
            cargo +${{ matrix.rust }} appimage --target=${{ matrix.target }}
          else
            cargo +${{ matrix.rust }} build --release --target=${{ matrix.target }}
          fi
      
      - name: Strip release binary (macos)
        shell: bash
        run: |
          if [[ ! "${{ matrix.os }}" =~ ("windows"|"ubuntu") ]]; then
            for executable in ${executable_names}; do
              strip "target/${{ matrix.target }}/release/${executable}"
            done
          fi
          
      - name: Upload files for packaging
        shell: bash
        run: |
          mkdir dist
          for executable in ${executable_names}; do
            if [[ "${{ matrix.os }}" =~ "windows" ]]; then
              cp "target/${{ matrix.target }}/release/${executable}.exe" "dist/"
            elif [[ "${{ matrix.os }}" =~ "ubuntu" ]]; then
              cp "${executable}"*.AppImage "dist/${executable}.AppImage"
            else
              cp "target/${{ matrix.target }}/release/${executable}" "dist/"
            fi
          done
          cp LICENSE.md README.md "dist/"
      
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: files-${{ matrix.build }}
          path: dist
  
  publish:
    name: Publish
    needs: [dev-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
      
      - run: ls -al files-*
      
      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist

          for dir in files-* ; do
              platform=${dir#"files-"}
              pkgname=image_tools-dev_build-$platform
              mkdir tmp/$pkgname
              mv ${dir}/* tmp/$pkgname/
              for executable in ${executable_names}; do
                if [[ $platform =~ "windows" ]]; then
                  chmod +x tmp/$pkgname/${executable}.exe
                elif [[ $platform =~ "linux" ]]; then
                  chmod +x tmp/$pkgname/${executable}.AppImage
                else
                  chmod +x tmp/$pkgname/${executable}
                fi
              done

              if [[ $platform =~ "windows" ]]; then
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              else
                  tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              fi
          done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: dev-build
          release_name: Development Build
          overwrite: true
          prerelease: true
